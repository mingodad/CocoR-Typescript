/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*/
-->begin

-->namespace

export class Parser {
-->constants
    static readonly  minErrDist : int = 2;

    public  scanner : Scanner;
    public   errors : Errors;
    public  log : (...data : any[]) => void = console.log;

    public  t : Token;    // last recognized token
    public  la : Token;   // lookahead token
    private errDist : int = Parser.minErrDist;

-->declarations

    constructor( scanner : Scanner) {
        this.scanner = scanner;
        this.errors = new Errors(this.scanner.parseFileName);
-->constructor
	}

    private  SynErr ( n : int) : void {
        if (this.errDist >= Parser.minErrDist) this.errors.SynErr(this.la.line, this.la.col, n);
        this.errDist = 0;
    }

    public  SemErr ( msg : string) : void {
        if (this.errDist >= Parser.minErrDist) this.errors.SemErrLineColStr(this.t.line, this.t.col, msg);
        this.errDist = 0;
    }

    private  Get () : void {
        for (;;) {
            //this.log(this.t, this.la);
            this.t = this.la;
            this.la = this.scanner.Scan();
            if (this.la.kind <= Parser.maxT) { ++this.errDist; break; }
-->pragmas
            this.la = this.t;
        }
    }

    private  isKind( t : Token,  n : int) : bool {
        let k : int = t.kind;
        while(k >= 0) {
            if (k == n) return true;
            k = Parser.tBase[k];
        }
        return false;
    }

    private  Expect ( n : int) : void {
        if (this.isKind(this.la, n)) this.Get(); else { this.SynErr(n); }
    }

    private  StartOf ( s : int) : bool {
        return Parser.set[s][this.la.kind];
    }

    private  ExpectWeak ( n : int,  follow : int) : void {
        if (this.isKind(this.la, n)) this.Get();
        else {
            this.SynErr(n);
            while (!this.StartOf(follow)) this.Get();
        }
    }


    private  WeakSeparator( n : int,  syFol : int,  repFol : int) : bool {
        let kind : int = this.la.kind;
        if (this.isKind(this.la, n)) {this.Get(); return true;}
        else if (this.StartOf(repFol)) {return false;}
        else {
            this.SynErr(n);
            while (!(Parser.set[syFol][kind] || Parser.set[repFol][kind] || Parser.set[0][kind])) {
                this.Get();
                kind = this.la.kind;
            }
            return this.StartOf(syFol);
        }
    }

	private SkipNested(leftKind: int, rightKind: int) : void {
		// manage nested braces
		if(this.la.kind != rightKind) {
			for (let nested : int = 1; nested > 0;) {
				//print("==", this.la.line, nested, this.la.kind, this.la.val);
				if(this.la.kind == leftKind) ++nested;
				this.Get();
				if(this.la.kind == rightKind) --nested;
				else if(this.la.kind == Parser._EOF) break;
			}
		}
	}

	private SkipTill(endKind : int) : void {
		while(this.la.kind != endKind || this.la.kind != Parser._EOF) {
			this.Get();
		}
	}

	private SkipTillEOL() : void {
		let currLine : int = this.la.line;
		while(this.la.line == currLine || this.la.kind != Parser._EOF) {
			this.Get();
		}
	}

-->productions

	public Parse() : void {
		this.la = new Token();
		this.la.val = "";
		this.Get();
-->parseRoot
	}

	// a token's base type
	public static readonly tBase : int[] = [
-->tbase
    ];

	static readonly set : bool[][] = [
-->initialization
    ];
/*
	public void CheckDeclared(errors : Errors) {
		let list : Array<Token>  = undeclaredTokens.Peek();
		for(Token t of list) {
			let msg : string  = string.Format(Parser.MissingSymbol, Parser.tName[this.t.kind], this.t.val, this.name);
			errors.SemErr(this.t.line, this.t.col, msg);
		}
	}
*/

/*#if PARSER_WITH_AST
	public ast_root : SynTree;
	private ast_stack : Stack ;

	public AstAddTerminal() : void {
        let st : SynTree = new SynTree( this.t );
        ((SynTree)(this.ast_stack.Peek())).children.Add(st);
	}

	public AstAddNonTerminal(kind : int, nt_name : string, line : int) : bool {
        let ntTok : Token  = new Token();
        ntTok.kind = kind;
        ntTok.line = line;
        ntTok.val = nt_name;
        let st : SynTree = new SynTree( ntTok );
        ((SynTree)(this.ast_stack.Peek())).children.Add(st);
        this.ast_stack.Push(st);
        return true;
	}

	public AstPopNonTerminal() : void {
        this.ast_stack.Pop();
	}
//#endif*/

} // end Parser


export class Errors {
    public  log : (...data : any[]) => void = console.log;
    public  count : int = 0;                                    // number of errors detected
    //public  errorStream : StreamWriter; //.IO.TextWriter = Console.Out;   // error messages go to this stream
    //public  errMsgFormat : string = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
    public  errMsgFormat : string = "%s:%d:%d %s %s"; // 0=line, 1=column, 2=text
    public  fileName : string = "grammar"; // 0=line, 1=column, 2=text

    constructor(fileName : string) {
        this.fileName = fileName;
    }

	public /*virtual*/  SynErr ( line : int,  col : int,  n : int) : void {
		let s : string;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		//errorStream.WriteLine(errMsgFormat, line, col, s);
		this.log(this.fileName + ":" + line + ":" + col + " SynErr " + s);
		++this.count;
	}

    public /*virtual*/  SemErrLineColStr ( line : int,  col : int,  s : string) : void {
        //this.errorStream.WriteLine(this.errMsgFormat, line, col, s);
        this.log(this.fileName + ":" + line + ":" + col + " SemErr " + s);
        ++this.count;
    }

    public /*virtual*/  SemErr ( s : string) : void {
        //this.errorStream.WriteLine(s);
        this.log(s);
        ++this.count;
    }

    public /*virtual*/  Warning ( line : int,  col : int,  s : string) : void {
        //this.errorStream.WriteLine(this.errMsgFormat, line, col, s);
        this.log(this.fileName + ":" + line + ":" + col + " Warning " + s);
    }

    public /*virtual*/  WarningStr( s : string) : void {
        //this.errorStream.WriteLine(s);
        this.log(s);
    }
} // Errors


export class FatalError /*extends Exception*/ {
    constructor( m : string)  {throw(m);}
}

export class Symboltable {
	public name : string ;
	public strict : bool ;
	public ignoreCase : bool ;
	public predefined : {[key: string] : bool};
	public scopes : Array<{[key: string] : bool}> = null ;

	constructor(name : string, ignoreCase : bool, strict : bool) {
		this.name = name;
		this.ignoreCase = ignoreCase;
		this.strict = strict;
	}

	public Add(t : Token) : bool {
        if(this.scopes != null && this.scopes.length > 0) {
			let ht = this.scopes[this.scopes.length-1];
			if(!ht.hasOwnProperty(t.val)) {
				ht[t.val] = true;
				return true;
			}
		}
		else if(!this.predefined.hasOwnProperty(t.val)) {
			this.predefined[t.val] = true;
			return true;
		}
		return false;
	}

	public Use(t : Token) : bool {
		if(this.scopes != null) {
			for(let i : int = this.scopes.length-1; i >= 0; --i) {
				if(this.scopes[i].hasOwnProperty(t.val)) {
					return true;
				}
			}
		}
		return this.predefined.hasOwnProperty(t.val);
	}

	public pushNewScope() : void {
		if(this.scopes == null) this.scopes = [];
		this.scopes.push({});
	}

	public popScope() : void {
		this.scopes.pop();
	}
}

