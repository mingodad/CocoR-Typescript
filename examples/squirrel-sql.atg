// From https://github.com/squirrel-sql-client/squirrel-sql-code/blob/f144cc386ce111514c1cb1562468a8e9f25c95e5/archive/work/jcomplete/atg/SquirrelSQL.atg

COMPILER squirrelSQL
IGNORECASE
CHARACTERS
	tab = '\u0009' .
	lf = '\u000a' .
	cr = '\u000d' .
	cntl = '\u0000'  .. '\u001f' .
	Special = '"'  + "%&'()*+,-./:;<=>?|" .
	Digit = "0123456789" .
	Letter = '\u0021'  .. '\u007f'  - Special  - Digit .
	noquote1 = ANY  - '"'  - cntl .
	noquote2 = ANY  - "'"  - cntl .
TOKENS
	ident  = Letter  { Letter  | Digit  } .
	intValue  = Digit  { Digit  } .
	float  =  [ Digit  { Digit  }  ] "." Digit  { Digit  } .
	SQLString  = '"'  { noquote1  | "'"  } '"'  | "'"  { noquote2  | '"'  } "'" .
	OpenParens  = "(" .
COMMENTS FROM "/*" TO "*/"  NESTED
COMMENTS FROM "--" TO cr
IGNORE '\u0001'  .. '\u001f'
PRODUCTIONS
squirrelSQL =
	SQLStatement  { SQLStatement  } EOF
	.
SQLStatement =
	 ( SelectStmt  | InsertStmt  | UpdateStmt  | DeleteStmt  | CreateStmt  | Drop  | AlterTable  | Transaction  )  [ ";"  ]
	.
SelectStmt =
	 ( SimpleSelect  { SetOperator SimpleSelect  }  )
	.
SetOperator =
	 ( "UNION"  | "EXCEPT"  | "INTERSECT"  | "MINUS"  )  [ "ALL"  ]
	.
UpdateStmt =
	"UPDATE" Table "SET" UpdateFieldList  [ WhereClause  ]
	.
UpdateFieldList =
	UpdateField  { ItemSeparator UpdateField  }
	.
UpdateField =
	ColumnName "=" Expression
	.
InsertStmt =
	"INSERT" "INTO" Table  [ OpenParens ColumnList CloseParens  ]  (  ( "VALUES" OpenParens FieldList CloseParens  )  | SelectStmt  )
	.
DeleteStmt =
	"DELETE" "FROM" Table  [ WhereClause  ]
	.
SimpleSelect =
	SelectClause FromClause  [ WhereClause  ]  [ GroupByClause  ]  [ HavingClause  ]  [ OrderByClause  ]
	.
SelectClause =
	SYNC "SELECT"  [ "DISTINCT"  | "ALL"  ] SelectFieldList
	.
FromClause =
	SYNC "FROM" FromTableList
	.
FromTableList =
	QualifiedTable  {  ( ItemSeparator QualifiedTable  )  | JoinStmt  }
	.
QualifiedTable =
	ident  [ "." ident  ]  [  [ "AS"  ] Alias  ]
	.
JoinStmt =
	 ( CrossJoin  |  (  [ JoinType  ] "JOIN" QualifiedTable  [ JoinExpr  ]  )  )
	.
CrossJoin =
	"CROSS" "JOIN" QualifiedTable
	.
JoinType =
	 [ "NATURAL"  ]  ( "INNER"  |  (  ( "FULL"  | "LEFT"  | "RIGHT"  )  [ "OUTER"  ]  )  )
	.
JoinExpr =
	 ( "ON" Expression  )
	|  ( "USING" OpenParens ColumnList CloseParens  )
	.
WhereClause =
	SYNC "WHERE" SearchCondition
	.
GroupByClause =
	SYNC "GROUP" "BY" FieldList
	.
HavingClause =
	SYNC "HAVING" SearchCondition
	.
OrderByClause =
	SYNC "ORDER" "BY" OrderByFldList
	.
SelectFieldList =
	SelectField  { ItemSeparator SelectField  }
	.
SelectField =
	 ( Expression  [ "AS" Alias  ]  )
	| "*"
	.
FunctionExpr =
	 ( "TIMESTAMP"  | "UPPER"  | "MONTH"  | "YEAR"  ) OpenParens Expression  { ItemSeparator Expression  } CloseParens
	.
ColumnFunction =
	 ( "COUNT"  | "SUM"  | "MAX"  | "MIN"  | "AVG"  ) OpenParens  ( "*"  |  (  [ "DISTINCT"  ] Expression  )  ) CloseParens
	.
ColumnList =
	ColumnName  { ItemSeparator ColumnName  }
	.
ColumnName =
	ident  [ "."  ( ident  | "*"  )  ]
	.
SimpleColumnName =
	ident
	.
SimpleColumnList =
	SimpleColumnName  { ItemSeparator SimpleColumnName  }
	.
SimpleColumnParam =
	OpenParens SimpleColumnList CloseParens
	.
FieldList =
	Field  { ItemSeparator Field  }
	.
Field =
	ColumnName
	| "NULL"
	| float
	| intValue
	| SQLString
	| Param
	.
Table =
	ident
	.
Alias =
	ident
	.
OrderByFldList =
	OrderByField  {  ( ItemSeparator OrderByField  )  }
	.
OrderByField =
	 ( ColumnName  | intValue  )  [  ( "DESC"  | "ASC"  )  ]
	.
SearchCondition =
	Expression
	.
Expression =
	SimpleExpression  { Relation SimpleExpression  }
	.
SimpleExpression =
	 [ NotOperator  ] Term  { Operator  [ NotOperator  ] Term  }
	.
Term =
	 [ "-"  ]  (  ( Field  [ TestExpr  ]  )  | ColumnFunction  | FunctionExpr  |  ( OpenParens  ( Expression  | SelectStmt  ) CloseParens  )  )
	.
Param =
	":" ident
	.
NotOperator =
	"NOT"
	.
Operator =
	MathOperator
	| WordOperator
	.
MathOperator =
	 ( "*"  | "/"  | "+"  | "-"  )
	.
WordOperator =
	 ( "AND"  | "OR"  )
	.
LikeTest =
	"LIKE"  ( SQLString  | Param  )  [ "ESCAPE" SQLString  ]
	.
NullTest =
	"IS"  [ NotOperator  ] "NULL"
	.
Relation =
	 ( "="  | "<>"  | "<"  | "<="  | ">"  | ">="  )
	.
TestExpr =
	NullTest
	|  [ NotOperator  ]  ( InSetExpr  | BetweenExpr  | LikeTest  )
	.
BetweenExpr =
	"BETWEEN" Field "AND" Field
	.
InSetExpr =
	"IN" OpenParens  ( FieldList  | SelectStmt  ) CloseParens
	.
Transaction =
	 ( "COMMIT"  | "ROLLBACK"  )  [ "WORK"  ]
	.
len =
	intValue
	.
lenParam =
	OpenParens len CloseParens
	.
precision =
	intValue ItemSeparator intValue
	.
DataType =
	 (  ( "CHAR"  | "CHARACTER"  ) lenParam  )
	|  ( "VARCHAR" lenParam  )
	|  ( "INTEGER"  | "INT"  )
	| "SMALLINT"
	|  ( "NUMERIC" OpenParens precision CloseParens  )
	| "DATE"
	|  ( "TIME" lenParam  )
	|  ( "TIMESTAMP" lenParam  )
	.
ColumnDefault =
	"DEFAULT"  ( SQLString  | intValue  | float  )
	.
ColumnDefList =
	ColumnDef  { ItemSeparator ColumnDef  }
	.
ColumnDef =
	SimpleColumnName DataType  { ColumnDefault  |  ( NotOperator "NULL"  )  }
	.
PrimaryKey =
	"PRIMARY" "KEY" SimpleColumnParam
	.
RelationName =
	ident
	.
ConstraintName =
	ident
	.
ForeignKey =
	"FOREIGN" "KEY" RelationName SimpleColumnParam "REFERENCES" Table  [ "MATCH"  ( "FULL"  | "PARTIAL"  )  ]  { "ON"  ( "DELETE"  | "UPDATE"  )  ( "CASCADE"  |  ( "SET"  ( "NULL"  | "DEFAULT"  )  )  )  |  ( "NO" "ACTION"  )  }
	.
Unique =
	"UNIQUE" SimpleColumnParam
	.
CheckConstraint =
	"CHECK" OpenParens Expression CloseParens
	.
CreatePart =
	ColumnDef
	| PrimaryKey
	| ForeignKey
	| Unique
	| CheckConstraint
	.
CreateStmt =
	"CREATE"  ( CreateTable  | CreateIndex  )
	.
CreateTable =
	"TABLE" Table OpenParens CreatePart  { ItemSeparator CreatePart  } CloseParens
	.
CascadeRestrict =
	 ( "CASCADE"  | "RESTRICT"  )
	.
Drop =
	"DROP"  ( DropTable  | IndexAndName  )
	.
DropTable =
	"TABLE" QualifiedTable  [ CascadeRestrict  ]
	.
Add =
	"ADD"  ( ColumnDefList  | PrimaryKey  | ForeignKey  | Unique  | CheckConstraint  )
	.
Alter =
	"ALTER" SimpleColumnName  (  ( "DROP" "DEFAULT"  )  |  ( "SET" ColumnDefault  )  )
	.
DropPart =
	"DROP"  (  ( SimpleColumnName CascadeRestrict  )  |  ( "PRIMARY" "KEY"  )  |  ( "FOREIGN" "KEY" RelationName  )  |  ( "CONSTRAINT" ConstraintName CascadeRestrict  )  )
	.
AlterTable =
	"ALTER" "TABLE" QualifiedTable  ( Add  | Alter  | DropPart  )
	.
IndexColumn =
	SimpleColumnName  [  ( "ASC"  | "DESC"  )  ]
	.
IndexColumnList =
	IndexColumn  { ItemSeparator IndexColumn  }
	.
IndexName =
	ident
	.
CreateIndex =
	 [ "UNIQUE"  ] IndexAndName "ON" Table OpenParens IndexColumnList CloseParens
	.
IndexAndName =
	"INDEX" IndexName
	.
ItemSeparator =
	WEAK ","
	.
CloseParens =
	WEAK ")"
	.
END squirrelSQL .
