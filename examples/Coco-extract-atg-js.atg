/*-------------------------------------------------------------------------
Coco.ATG -- Attributed Grammar
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------
 compile with:
   Coco Coco.ATG -namespace at.jku.ssw.Coco
-------------------------------------------------------------------------*/

COMPILER Coco

	Parser.prototype.checkEscaped = function(s /*: string*/) /*: string*/ {
		/*if( s == "'\\\\'") return "'\\'";
		else*/ if( s == "'\\''") return "\"'\"";
		return s;
	}

	Parser.prototype.strBuf /*: Array<string>*/ = new Array/*<string>*/();
	Parser.prototype.printf = function(fmt /*: string*/, data /*? : string | null*/) /*: void*/ {
		if(data) this.strBuf.push(fmt.replace("%s", data));
		else this.strBuf.push(fmt);
	}

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable = '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS
	ident     = letter { letter | digit }.
	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

	LEFT_ANGLE_BRACK = '<'.
	RIGHT_ANGLE_BRACK = '>'.

PRAGMAS
	ddtSym    = '$' { digit | letter }.

	optionSym = '$' letter { letter } '='
	            { digit | letter
	            | '-' | '.' | ':'
	            }.


COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

Coco
=
  [ // using statements
    ANY
    { ANY }
  ]
  "COMPILER" (. this.printf("%s ", this.t.val); .)
  ident (. this.printf("%s\n\n", this.t.val); .)
  { ANY }
  [ "IGNORECASE"    (. this.printf("%s\n\n", this.t.val); .)     ]   /* pdt */
  [ "CHARACTERS" (. this.printf("%s\n", this.t.val); .) { SetDecl } (. this.printf("\n"); .)]
  [ "TOKENS"  (. this.printf("%s\n", this.t.val); .) { TokenDecl } (. this.printf("\n"); .)]
  [ "PRAGMAS" (. this.printf("%s\n", this.t.val); .) { TokenDecl } (. this.printf("\n"); .)]
  { "COMMENTS" (. this.printf("%s ", this.t.val); .)
    "FROM" (. this.printf("%s ", this.t.val); .) TokenExpr
    "TO" (. this.printf("%s ", this.t.val); .) TokenExpr
    [ "NESTED" (. this.printf(" %s\n", this.t.val); .)
    ]
  } (. this.printf("\n"); .)
  { "IGNORE" (. this.printf("%s ", this.t.val); .) Set
  } (. this.printf("\n\n"); .)

  SYNC
  "PRODUCTIONS" (. this.printf("\n%s\n\n", this.t.val); .)
  { ident (. this.printf("%s =\n\t", this.t.val); .)
    [ AttrDecl ]
    [ SemText ] WEAK
    '='
    Expression<0>
                                WEAK
    '.' (. this.printf("\n\t.\n\n"); .)
  }
  "END" ident (. this.printf("END %s .\n\n", this.t.val); this.log(this.strBuf.join("")); .)
  '.'
.

/*------------------------------------------------------------------------------------*/

SetDecl
=       (. this.printf("\t"); .)
  ident (. this.printf("%s = ", this.t.val); .)
  '='  Set
  '.' (. this.printf(".\n"); .)
.

/*------------------------------------------------------------------------------------*/

Set
=
  SimSet (. this.printf("%s ", this.checkEscaped(this.t.val)); .)
  { '+' (. this.printf(" + "); .) SimSet (. this.printf("%s ", this.checkEscaped(this.t.val)); .)
  | '-'  (. this.printf(" - "); .) SimSet (. this.printf("%s ", this.checkEscaped(this.t.val)); .)
  }
.

/*------------------------------------------------------------------------------------*/

SimSet
=
( ident
| string
| Char  	(. if( this.la.val == ".." ) this.printf("%s ", this.t.val); .)
  [ ".." (. this.printf(" .. "); .) Char
  ]
| "ANY"
)
.

/*--------------------------------------------------------------------------------------*/

Char   (. let chr_num /*: string*/; .)
=
  char
  | "CHR" '(' number (. chr_num = this.t.val; .) ')' (. this.t.val = `'\\u${(+chr_num).toString(16)}'`; .)
.

/*------------------------------------------------------------------------------------*/

TokenDecl
=              (. this.printf("\t"); .)
  Sym
  SYNC
  ( '='  (. this.printf(" = "); .) TokenExpr '.'   (. this.printf(".\n"); .)
  | (. this.printf("\n"); .)
  )
  [ SemText
  ]
.

/*------------------------------------------------------------------------------------*/

AttrDecl
=
  '<'  (. this.SkipNested(Parser._LEFT_ANGLE_BRACK, Parser._RIGHT_ANGLE_BRACK); .)
  {
    ANY
  | badString
  }
  '>'
| "<."
  { ANY
  | badString
  }
  ".>"
.

/*------------------------------------------------------------------------------------*/

Expression<level : int>
=
  Term
  {                             WEAK
    '|' (. this.printf("%s| ", level > 0 ? " " : "\n\t"); .)
    Term
  }
.

/*------------------------------------------------------------------------------------*/

Term
=
( [
    Resolver
  ]
  Factor
  { Factor
  }
|
)
.

/*------------------------------------------------------------------------------------*/

Factor
=
( [ "WEAK" (. this.printf("WEAK "); .)
  ]
  Sym
  [ Attribs
  ]
| '(' (. this.printf(" ( "); .) Expression<1> ')' (. this.printf(" ) "); .)
| '['  (. this.printf(" [ "); .) Expression<1> ']' (. this.printf(" ] "); .)
| '{' (. this.printf(" { "); .) Expression<1> '}' (. this.printf(" } "); .)
| SemText
| "ANY" (. this.printf("ANY "); .)
| "SYNC" (. this.printf("SYNC "); .)
)
.

/*------------------------------------------------------------------------------------*/

Resolver
=
  "IF" "("
  Condition
.

/*------------------------------------------------------------------------------------*/

Condition = { "(" Condition | ANY } ")" .

/*------------------------------------------------------------------------------------*/

TokenExpr
=
  TokenTerm
  {                             WEAK
    '|' (. this.printf(" | "); .)
    TokenTerm
  }
.

/*------------------------------------------------------------------------------------*/

TokenTerm
=
  TokenFactor
  { TokenFactor
  }
  [ "CONTEXT" (. this.printf("CONTEXT "); .)
    '(' (. this.printf(" ( "); .) TokenExpr
    ')' (. this.printf(" ) "); .)
  ]
.

/*------------------------------------------------------------------------------------*/

TokenFactor
=

( Sym
| '(' (. this.printf(" ( "); .) TokenExpr ')' (. this.printf(" ) "); .)
| '[' (. this.printf(" [ "); .) TokenExpr ']' (. this.printf(" ] "); .)
| '{' (. this.printf(" { "); .) TokenExpr '}' (. this.printf(" } "); .)
)
.

/*------------------------------------------------------------------------------------*/

Sym
=
( ident (. this.printf("%s ", this.t.val); .)
| (string 	(. this.printf("%s ",  this.t.val); .)
  | char (. this.printf("%s ", this.checkEscaped(this.t.val)); .)
  )
)
.

/*------------------------------------------------------------------------------------*/

Attribs
=
  '<'
  { ANY
  | badString
  }
  '>'
| "<."
  { ANY
  | badString
  }
  ".>"
.

/*------------------------------------------------------------------------------------*/

SemText
=
  "(."
  { ANY
  | badString
  | "(."
  }
  ".)"
.

END Coco.
